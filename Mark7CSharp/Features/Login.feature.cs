// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mark7CSharp.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Login")]
    public partial class LoginFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Login.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "Login", "    Para que somente eu possa ver as minhas tarefas\r\n    Sendo um usuário cadastr" +
                    "ado\r\n    Posso logar no sistema", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login do usuário")]
        [NUnit.Framework.CategoryAttribute("login")]
        public virtual void LoginDoUsuario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login do usuário", null, new string[] {
                        "login"});
#line 9
    this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
        testRunner.When("faço login com \'ilton.io@ninja.com.br \' e \'123456\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 11
        testRunner.Then("sou redirecionado para o painel de tarefas com a mensagem \'Hello, ilton\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tentativa de logar")]
        [NUnit.Framework.CategoryAttribute("loginFalha")]
        public virtual void TentativaDeLogar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tentativa de logar", null, new string[] {
                        "loginFalha"});
#line 14
    this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "email",
                        "senha"});
            table1.AddRow(new string[] {
                        "ilton.io@ninja.com.br",
                        "654321"});
            table1.AddRow(new string[] {
                        "joao.das.neves@dancadascadeiras.org",
                        "xpto123"});
            table1.AddRow(new string[] {
                        "ilton&qaninja.io",
                        "123456"});
            table1.AddRow(new string[] {
                        "",
                        "xpto123"});
            table1.AddRow(new string[] {
                        "ilton.io@ninja.com.br",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        ""});
#line 15
        testRunner.When("faço login com email e senha:", ((string)(null)), table1, "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "saida"});
            table2.AddRow(new string[] {
                        "Incorrect password"});
            table2.AddRow(new string[] {
                        "User not found"});
            table2.AddRow(new string[] {
                        "Email is required"});
            table2.AddRow(new string[] {
                        "Email is required"});
            table2.AddRow(new string[] {
                        "Password is required"});
            table2.AddRow(new string[] {
                        "Email is required"});
#line 23
        testRunner.Then("devo ver a mensagem de alerta saida:", ((string)(null)), table2, "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

